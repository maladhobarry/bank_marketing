apiVersion: v1
kind: PersistentVolume
metadata:
  name: models
  labels:
    # Implementation detail: Define a label so the Claim (PVC) can select this volume
    ivado.mlops/pv-name: models
spec:
  capacity:
    storage: 300M
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
    - ReadOnlyMany
  persistentVolumeReclaimPolicy: Retain
  # Implementation detail: This needs to be set to a value recognized by your cluster.
  #                        Otherwise, your PV will NOT be used and your claim might
  #                        create a volume via Dynamic Provisioning.
  storageClassName: standard
  # NOTE: This is the path on the host of Kubernetes.
  #       host = the "computer" running Kubernetes (usually a VM)
  #
  #       As a k8s user, you will need to make sure this is populated
  #       via the `minikube cp` command (or via path sharing `minikube mount`)
  hostPath:
    path: /data/ivamlops/models
  nodeAffinity:
    required:
       nodeSelectorTerms:
        - matchExpressions:
            - key: "minikube.k8s.io/name"
              operator: Exists
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: models
spec:
  resources:
    requests:
      storage: 300M
  volumeMode: Filesystem
  accessModes:
    - ReadOnlyMany
  selector:
    # Implementation detail: Use the label of our PV
    matchLabels:
      ivado.mlops/pv-name: models
