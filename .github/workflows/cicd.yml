on:
  push:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# These variables will be accessible in the jobs
# as ${{ env.NAME_OF_VARIABLE }}
# Note that we reference the repository secrets
# and the repository variables
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: northamerica-northeast1
  GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}
  GKE_LOCATION: ${{ vars.GKE_LOCATION }}

jobs:
  ci:
    name: Check lint, check format, run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # TODO: Use pregenerated requirements
      - name: Set up style and lint generate-requirements
        run: |
          pip install -r requirements/style.requirements.txt

      # TODO: Replace next 2 with commands
      - name: Lint
        run: |
          ruff check server_app/ client_app/ src/bank_marketing
      - name: Format check
        run: |
          black --check server_app/ client_app/ src/bank_marketing

  setup-build-publish-deploy:
    # DONE: Consider renaming
    name: CICD- Build and Deploy
    runs-on: ubuntu-latest
    # CHANGED
    # We don't have environment in our current setup
    # environment: production

    # By specifying this we tell GitHub actions to wait
    # until job "ci" is done to run our job
    needs: ["ci"]

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    # Note: By default, the code (this repository) is not checked out
    #       You need to explicitly checkout
    - name: Checkout
      uses: actions/checkout@v3

    # Boilerplate
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        credentials_json: '${{ secrets.SA_CICD_KEY }}'

    - uses: 'docker/login-action@v1'
      with:
        registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
        username: 'oauth2accesstoken'
        # DONE: You need to use the value from the 'auth' step,
        #       Look at the documentation of the action
        #       google-github-actions/auth@v1 action to see the
        #       outputs available
        password: '${{ steps.auth.outputs.access_token }}'

    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_LOCATION }}

    # Build the Docker images
    - name: Build
      run: |-
        make docker-build-client docker-build-server

    # Push the Docker images to Google Artifact Registry
    - name: Publish
      run: |-
        make docker-push-client docker-push-server

    # Deploy to GKE
    - name: Deploy to GKE
      run: |-
        make deploy-gke
